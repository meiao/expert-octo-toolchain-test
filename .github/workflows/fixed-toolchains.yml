name: Fixed toolchain

on: workflow_dispatch

jobs:
  fixed_toolchain:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: gradle/wrapper-validation-action@v1
      # The first JDK set up gets to be "primary".
      # even though we are setting up Java 11 here, it is not being used by by the toolchain
      # this can be verified by checking the JAVA_HOME_11.0.??_x64 envvar value and the values on the Check toolchains cmd
      - name: Set up JDK 11
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 11
      - name: save JAVA_HOME as JDK11 for later usage
        run: echo "JDK11=$JAVA_HOME" >> $GITHUB_ENV
      # Java is installed; document settings
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 8
      - name: save JAVA_HOME as JDK8 for later usage
        run: echo "JDK8=$JAVA_HOME" >> $GITHUB_ENV
      - name: log project settings
        run: |
          echo "--- Java versions ---"
          $JDK8/bin/java -version
          $JDK11/bin/java -version
      - name: Set Gradle options
        run: echo "GRADLE_OPTIONS=-Porg.gradle.java.installations.auto-detect=false -Porg.gradle.java.installations.fromEnv=JDK8,JDK11" >> $GITHUB_ENV
      # JDKs listed here do match the ones that were setup earlier
      - name: Check toolchains
        run: ./gradlew $GRADLE_OPTIONS -q javaToolchains
      # And the problem is that the Javadoc is not being created using Java 11.0.14, which has a fix for a Jszip vulnerability
      - name: Create Javadoc
        run: ./gradlew -Porg.gradle.java.installations.auto-detect=false -Porg.gradle.java.installations.fromEnv=JDK8,JDK11 javadoc
      - name: Capture Javadoc
        uses: actions/upload-artifact@v2
        with:
          name: javadoc
          # The regex for the path below will capture unit test HTML reports generated by gradle for all
          # related modules: (agent-bridge, newrelic-java, newrelic-api, etc).
          # However, it's critical that the previous build step does a ./gradlew clean or the regex will capture test reports
          # that were leftover in unrelated modules for functional and instrumentation tests.
          path: |
            **/build/docs/*
